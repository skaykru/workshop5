
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b2c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003cb4  08003cb4  00004cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cd4  08003cd4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cd4  08003cd4  00004cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cdc  08003cdc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cdc  08003cdc  00004cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ce0  08003ce0  00004ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ce4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000001e4  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f0  200001f0  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a0f  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c97  00000000  00000000  0000ea4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  000106e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000730  00000000  00000000  00011040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fdfe  00000000  00000000  00011770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d2ed  00000000  00000000  0003156e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0dfc  00000000  00000000  0003e85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ff657  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025f8  00000000  00000000  000ff69c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  00101c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c9c 	.word	0x08003c9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003c9c 	.word	0x08003c9c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <CS43L22_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CS43L22_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af02      	add	r7, sp, #8
	// Enable chip
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2110      	movs	r1, #16
 80004c2:	4863      	ldr	r0, [pc, #396]	@ (8000650 <CS43L22_Init+0x198>)
 80004c4:	f001 fbda 	bl	8001c7c <HAL_GPIO_WritePin>
	//
	// Initialization
	//
	uint8_t TxBuffer[2];

	TxBuffer[0] = 0x0D;
 80004c8:	230d      	movs	r3, #13
 80004ca:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x01;
 80004cc:	2301      	movs	r3, #1
 80004ce:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80004d0:	1d3a      	adds	r2, r7, #4
 80004d2:	230a      	movs	r3, #10
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	2302      	movs	r3, #2
 80004d8:	2194      	movs	r1, #148	@ 0x94
 80004da:	485e      	ldr	r0, [pc, #376]	@ (8000654 <CS43L22_Init+0x19c>)
 80004dc:	f001 fd2c 	bl	8001f38 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x00;
 80004e0:	2300      	movs	r3, #0
 80004e2:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x99;
 80004e4:	2399      	movs	r3, #153	@ 0x99
 80004e6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80004e8:	1d3a      	adds	r2, r7, #4
 80004ea:	230a      	movs	r3, #10
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2302      	movs	r3, #2
 80004f0:	2194      	movs	r1, #148	@ 0x94
 80004f2:	4858      	ldr	r0, [pc, #352]	@ (8000654 <CS43L22_Init+0x19c>)
 80004f4:	f001 fd20 	bl	8001f38 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x47;
 80004f8:	2347      	movs	r3, #71	@ 0x47
 80004fa:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x80;
 80004fc:	2380      	movs	r3, #128	@ 0x80
 80004fe:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000500:	1d3a      	adds	r2, r7, #4
 8000502:	230a      	movs	r3, #10
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2302      	movs	r3, #2
 8000508:	2194      	movs	r1, #148	@ 0x94
 800050a:	4852      	ldr	r0, [pc, #328]	@ (8000654 <CS43L22_Init+0x19c>)
 800050c:	f001 fd14 	bl	8001f38 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x32;
 8000510:	2332      	movs	r3, #50	@ 0x32
 8000512:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0xFF;
 8000514:	23ff      	movs	r3, #255	@ 0xff
 8000516:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000518:	1d3a      	adds	r2, r7, #4
 800051a:	230a      	movs	r3, #10
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2302      	movs	r3, #2
 8000520:	2194      	movs	r1, #148	@ 0x94
 8000522:	484c      	ldr	r0, [pc, #304]	@ (8000654 <CS43L22_Init+0x19c>)
 8000524:	f001 fd08 	bl	8001f38 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x32;
 8000528:	2332      	movs	r3, #50	@ 0x32
 800052a:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x7F;
 800052c:	237f      	movs	r3, #127	@ 0x7f
 800052e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000530:	1d3a      	adds	r2, r7, #4
 8000532:	230a      	movs	r3, #10
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2302      	movs	r3, #2
 8000538:	2194      	movs	r1, #148	@ 0x94
 800053a:	4846      	ldr	r0, [pc, #280]	@ (8000654 <CS43L22_Init+0x19c>)
 800053c:	f001 fcfc 	bl	8001f38 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x00;
 8000540:	2300      	movs	r3, #0
 8000542:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x00;
 8000544:	2300      	movs	r3, #0
 8000546:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000548:	1d3a      	adds	r2, r7, #4
 800054a:	230a      	movs	r3, #10
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2302      	movs	r3, #2
 8000550:	2194      	movs	r1, #148	@ 0x94
 8000552:	4840      	ldr	r0, [pc, #256]	@ (8000654 <CS43L22_Init+0x19c>)
 8000554:	f001 fcf0 	bl	8001f38 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x04;
 8000558:	2304      	movs	r3, #4
 800055a:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0xAF;
 800055c:	23af      	movs	r3, #175	@ 0xaf
 800055e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000560:	1d3a      	adds	r2, r7, #4
 8000562:	230a      	movs	r3, #10
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2302      	movs	r3, #2
 8000568:	2194      	movs	r1, #148	@ 0x94
 800056a:	483a      	ldr	r0, [pc, #232]	@ (8000654 <CS43L22_Init+0x19c>)
 800056c:	f001 fce4 	bl	8001f38 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x0D;
 8000570:	230d      	movs	r3, #13
 8000572:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x70;
 8000574:	2370      	movs	r3, #112	@ 0x70
 8000576:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000578:	1d3a      	adds	r2, r7, #4
 800057a:	230a      	movs	r3, #10
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2302      	movs	r3, #2
 8000580:	2194      	movs	r1, #148	@ 0x94
 8000582:	4834      	ldr	r0, [pc, #208]	@ (8000654 <CS43L22_Init+0x19c>)
 8000584:	f001 fcd8 	bl	8001f38 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x05;
 8000588:	2305      	movs	r3, #5
 800058a:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x81;
 800058c:	2381      	movs	r3, #129	@ 0x81
 800058e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000590:	1d3a      	adds	r2, r7, #4
 8000592:	230a      	movs	r3, #10
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2302      	movs	r3, #2
 8000598:	2194      	movs	r1, #148	@ 0x94
 800059a:	482e      	ldr	r0, [pc, #184]	@ (8000654 <CS43L22_Init+0x19c>)
 800059c:	f001 fccc 	bl	8001f38 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x06;
 80005a0:	2306      	movs	r3, #6
 80005a2:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x07;
 80005a4:	2307      	movs	r3, #7
 80005a6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005a8:	1d3a      	adds	r2, r7, #4
 80005aa:	230a      	movs	r3, #10
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2302      	movs	r3, #2
 80005b0:	2194      	movs	r1, #148	@ 0x94
 80005b2:	4828      	ldr	r0, [pc, #160]	@ (8000654 <CS43L22_Init+0x19c>)
 80005b4:	f001 fcc0 	bl	8001f38 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x0A;
 80005b8:	230a      	movs	r3, #10
 80005ba:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x00;
 80005bc:	2300      	movs	r3, #0
 80005be:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005c0:	1d3a      	adds	r2, r7, #4
 80005c2:	230a      	movs	r3, #10
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2302      	movs	r3, #2
 80005c8:	2194      	movs	r1, #148	@ 0x94
 80005ca:	4822      	ldr	r0, [pc, #136]	@ (8000654 <CS43L22_Init+0x19c>)
 80005cc:	f001 fcb4 	bl	8001f38 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x27;
 80005d0:	2327      	movs	r3, #39	@ 0x27
 80005d2:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x00;
 80005d4:	2300      	movs	r3, #0
 80005d6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005d8:	1d3a      	adds	r2, r7, #4
 80005da:	230a      	movs	r3, #10
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2302      	movs	r3, #2
 80005e0:	2194      	movs	r1, #148	@ 0x94
 80005e2:	481c      	ldr	r0, [pc, #112]	@ (8000654 <CS43L22_Init+0x19c>)
 80005e4:	f001 fca8 	bl	8001f38 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x1A;
 80005e8:	231a      	movs	r3, #26
 80005ea:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x0A;
 80005ec:	230a      	movs	r3, #10
 80005ee:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80005f0:	1d3a      	adds	r2, r7, #4
 80005f2:	230a      	movs	r3, #10
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2302      	movs	r3, #2
 80005f8:	2194      	movs	r1, #148	@ 0x94
 80005fa:	4816      	ldr	r0, [pc, #88]	@ (8000654 <CS43L22_Init+0x19c>)
 80005fc:	f001 fc9c 	bl	8001f38 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x1B;
 8000600:	231b      	movs	r3, #27
 8000602:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x0A;
 8000604:	230a      	movs	r3, #10
 8000606:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000608:	1d3a      	adds	r2, r7, #4
 800060a:	230a      	movs	r3, #10
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2302      	movs	r3, #2
 8000610:	2194      	movs	r1, #148	@ 0x94
 8000612:	4810      	ldr	r0, [pc, #64]	@ (8000654 <CS43L22_Init+0x19c>)
 8000614:	f001 fc90 	bl	8001f38 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x1F;
 8000618:	231f      	movs	r3, #31
 800061a:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x0F;
 800061c:	230f      	movs	r3, #15
 800061e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000620:	1d3a      	adds	r2, r7, #4
 8000622:	230a      	movs	r3, #10
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2302      	movs	r3, #2
 8000628:	2194      	movs	r1, #148	@ 0x94
 800062a:	480a      	ldr	r0, [pc, #40]	@ (8000654 <CS43L22_Init+0x19c>)
 800062c:	f001 fc84 	bl	8001f38 <HAL_I2C_Master_Transmit>

	TxBuffer[0] = 0x02;
 8000630:	2302      	movs	r3, #2
 8000632:	713b      	strb	r3, [r7, #4]
	TxBuffer[1] = 0x9E;
 8000634:	239e      	movs	r3, #158	@ 0x9e
 8000636:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000638:	1d3a      	adds	r2, r7, #4
 800063a:	230a      	movs	r3, #10
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2302      	movs	r3, #2
 8000640:	2194      	movs	r1, #148	@ 0x94
 8000642:	4804      	ldr	r0, [pc, #16]	@ (8000654 <CS43L22_Init+0x19c>)
 8000644:	f001 fc78 	bl	8001f38 <HAL_I2C_Master_Transmit>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40020c00 	.word	0x40020c00
 8000654:	20000028 	.word	0x20000028

08000658 <CS43L22_Beep>:

void CS43L22_Beep(soundToneType pitch, uint32_t duration_ms)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af02      	add	r7, sp, #8
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuffer[2];

	// Set volume and off time
	TxBuffer[0] = 0x1D;		// Register address
 8000664:	231d      	movs	r3, #29
 8000666:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0x00;		// Value (volume and off time)
 8000668:	2300      	movs	r3, #0
 800066a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 800066c:	f107 020c 	add.w	r2, r7, #12
 8000670:	230a      	movs	r3, #10
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2302      	movs	r3, #2
 8000676:	2194      	movs	r1, #148	@ 0x94
 8000678:	483c      	ldr	r0, [pc, #240]	@ (800076c <CS43L22_Beep+0x114>)
 800067a:	f001 fc5d 	bl	8001f38 <HAL_I2C_Master_Transmit>

	// Set sound frequency
	TxBuffer[0] = 0x1C;		// Register address
 800067e:	231c      	movs	r3, #28
 8000680:	733b      	strb	r3, [r7, #12]
	switch (pitch)
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d844      	bhi.n	8000712 <CS43L22_Beep+0xba>
 8000688:	a201      	add	r2, pc, #4	@ (adr r2, 8000690 <CS43L22_Beep+0x38>)
 800068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068e:	bf00      	nop
 8000690:	080006d1 	.word	0x080006d1
 8000694:	080006d7 	.word	0x080006d7
 8000698:	080006db 	.word	0x080006db
 800069c:	080006df 	.word	0x080006df
 80006a0:	080006e3 	.word	0x080006e3
 80006a4:	080006e7 	.word	0x080006e7
 80006a8:	080006eb 	.word	0x080006eb
 80006ac:	080006ef 	.word	0x080006ef
 80006b0:	080006f3 	.word	0x080006f3
 80006b4:	080006f7 	.word	0x080006f7
 80006b8:	080006fb 	.word	0x080006fb
 80006bc:	080006ff 	.word	0x080006ff
 80006c0:	08000703 	.word	0x08000703
 80006c4:	08000707 	.word	0x08000707
 80006c8:	0800070b 	.word	0x0800070b
 80006cc:	0800070f 	.word	0x0800070f
	{
		case C4:
			TxBuffer[1] = 0x00;		// Value (frequency and on time)
 80006d0:	2300      	movs	r3, #0
 80006d2:	737b      	strb	r3, [r7, #13]
			break;
 80006d4:	e020      	b.n	8000718 <CS43L22_Beep+0xc0>
		case C5:
			TxBuffer[1] = 0x10;
 80006d6:	2310      	movs	r3, #16
 80006d8:	737b      	strb	r3, [r7, #13]
		case D5:
			TxBuffer[1] = 0x20;
 80006da:	2320      	movs	r3, #32
 80006dc:	737b      	strb	r3, [r7, #13]
		case E5:
			TxBuffer[1] = 0x30;
 80006de:	2330      	movs	r3, #48	@ 0x30
 80006e0:	737b      	strb	r3, [r7, #13]
		case F5:
			TxBuffer[1] = 0x40;
 80006e2:	2340      	movs	r3, #64	@ 0x40
 80006e4:	737b      	strb	r3, [r7, #13]
		case G5:
			TxBuffer[1] = 0x50;
 80006e6:	2350      	movs	r3, #80	@ 0x50
 80006e8:	737b      	strb	r3, [r7, #13]
		case A5:
			TxBuffer[1] = 0x60;
 80006ea:	2360      	movs	r3, #96	@ 0x60
 80006ec:	737b      	strb	r3, [r7, #13]
		case B5:
			TxBuffer[1] = 0x70;
 80006ee:	2370      	movs	r3, #112	@ 0x70
 80006f0:	737b      	strb	r3, [r7, #13]
		case C6:
			TxBuffer[1] = 0x80;
 80006f2:	2380      	movs	r3, #128	@ 0x80
 80006f4:	737b      	strb	r3, [r7, #13]
		case D6:
			TxBuffer[1] = 0x90;
 80006f6:	2390      	movs	r3, #144	@ 0x90
 80006f8:	737b      	strb	r3, [r7, #13]
		case E6:
			TxBuffer[1] = 0xA0;
 80006fa:	23a0      	movs	r3, #160	@ 0xa0
 80006fc:	737b      	strb	r3, [r7, #13]
		case F6:
			TxBuffer[1] = 0xB0;
 80006fe:	23b0      	movs	r3, #176	@ 0xb0
 8000700:	737b      	strb	r3, [r7, #13]
		case G6:
			TxBuffer[1] = 0xC0;
 8000702:	23c0      	movs	r3, #192	@ 0xc0
 8000704:	737b      	strb	r3, [r7, #13]
		case A6:
			TxBuffer[1] = 0xD0;
 8000706:	23d0      	movs	r3, #208	@ 0xd0
 8000708:	737b      	strb	r3, [r7, #13]
		case B6:
			TxBuffer[1] = 0xE0;
 800070a:	23e0      	movs	r3, #224	@ 0xe0
 800070c:	737b      	strb	r3, [r7, #13]
		case C7:
			TxBuffer[1] = 0xF0;
 800070e:	23f0      	movs	r3, #240	@ 0xf0
 8000710:	737b      	strb	r3, [r7, #13]
		// Assume C4 for all other cases
		case MAX_VALUE:
		default:
			TxBuffer[1] = 0x00;		// Value (frequency and on time)
 8000712:	2300      	movs	r3, #0
 8000714:	737b      	strb	r3, [r7, #13]
			break;
 8000716:	bf00      	nop
	}
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000718:	f107 020c 	add.w	r2, r7, #12
 800071c:	230a      	movs	r3, #10
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2302      	movs	r3, #2
 8000722:	2194      	movs	r1, #148	@ 0x94
 8000724:	4811      	ldr	r0, [pc, #68]	@ (800076c <CS43L22_Beep+0x114>)
 8000726:	f001 fc07 	bl	8001f38 <HAL_I2C_Master_Transmit>

	// Enable continuous mode (SOUND STARTED)
	TxBuffer[0] = 0x1E;		// Register address
 800072a:	231e      	movs	r3, #30
 800072c:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0xC0;		// Value (beep and tone configuration)
 800072e:	23c0      	movs	r3, #192	@ 0xc0
 8000730:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000732:	f107 020c 	add.w	r2, r7, #12
 8000736:	230a      	movs	r3, #10
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2302      	movs	r3, #2
 800073c:	2194      	movs	r1, #148	@ 0x94
 800073e:	480b      	ldr	r0, [pc, #44]	@ (800076c <CS43L22_Beep+0x114>)
 8000740:	f001 fbfa 	bl	8001f38 <HAL_I2C_Master_Transmit>

	// Playing...
	HAL_Delay(duration_ms);
 8000744:	6838      	ldr	r0, [r7, #0]
 8000746:	f000 fc57 	bl	8000ff8 <HAL_Delay>

	// Disable continuous mode (SOUND STOPED)
	TxBuffer[0] = 0x1E;		// Register address
 800074a:	231e      	movs	r3, #30
 800074c:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0x00;		// Value (beep and tone configuration)
 800074e:	2300      	movs	r3, #0
 8000750:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8000752:	f107 020c 	add.w	r2, r7, #12
 8000756:	230a      	movs	r3, #10
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2302      	movs	r3, #2
 800075c:	2194      	movs	r1, #148	@ 0x94
 800075e:	4803      	ldr	r0, [pc, #12]	@ (800076c <CS43L22_Beep+0x114>)
 8000760:	f001 fbea 	bl	8001f38 <HAL_I2C_Master_Transmit>
}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000028 	.word	0x20000028

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000774:	f000 fbce 	bl	8000f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000778:	f000 f8d8 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077c:	f000 f9c0 	bl	8000b00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000780:	f000 f99e 	bl	8000ac0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000784:	f000 f940 	bl	8000a08 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000788:	f000 f96c 	bl	8000a64 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  // Init DAC
  CS43L22_Init();
 800078c:	f7ff fe94 	bl	80004b8 <CS43L22_Init>

  // Transmit empty data
  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, 100);
 8000790:	2264      	movs	r2, #100	@ 0x64
 8000792:	4963      	ldr	r1, [pc, #396]	@ (8000920 <main+0x1b0>)
 8000794:	4863      	ldr	r0, [pc, #396]	@ (8000924 <main+0x1b4>)
 8000796:	f002 f869 	bl	800286c <HAL_I2S_Transmit_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007a0:	4861      	ldr	r0, [pc, #388]	@ (8000928 <main+0x1b8>)
 80007a2:	f001 fa6b 	bl	8001c7c <HAL_GPIO_WritePin>
	  CS43L22_Beep(C5, 100);
 80007a6:	2164      	movs	r1, #100	@ 0x64
 80007a8:	2001      	movs	r0, #1
 80007aa:	f7ff ff55 	bl	8000658 <CS43L22_Beep>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007b4:	485c      	ldr	r0, [pc, #368]	@ (8000928 <main+0x1b8>)
 80007b6:	f001 fa61 	bl	8001c7c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80007ba:	2064      	movs	r0, #100	@ 0x64
 80007bc:	f000 fc1c 	bl	8000ff8 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007c6:	4858      	ldr	r0, [pc, #352]	@ (8000928 <main+0x1b8>)
 80007c8:	f001 fa58 	bl	8001c7c <HAL_GPIO_WritePin>
	  CS43L22_Beep(E5, 100);
 80007cc:	2164      	movs	r1, #100	@ 0x64
 80007ce:	2003      	movs	r0, #3
 80007d0:	f7ff ff42 	bl	8000658 <CS43L22_Beep>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007da:	4853      	ldr	r0, [pc, #332]	@ (8000928 <main+0x1b8>)
 80007dc:	f001 fa4e 	bl	8001c7c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80007e0:	2064      	movs	r0, #100	@ 0x64
 80007e2:	f000 fc09 	bl	8000ff8 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ec:	484e      	ldr	r0, [pc, #312]	@ (8000928 <main+0x1b8>)
 80007ee:	f001 fa45 	bl	8001c7c <HAL_GPIO_WritePin>
	  CS43L22_Beep(F5, 100);
 80007f2:	2164      	movs	r1, #100	@ 0x64
 80007f4:	2004      	movs	r0, #4
 80007f6:	f7ff ff2f 	bl	8000658 <CS43L22_Beep>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000800:	4849      	ldr	r0, [pc, #292]	@ (8000928 <main+0x1b8>)
 8000802:	f001 fa3b 	bl	8001c7c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000806:	2064      	movs	r0, #100	@ 0x64
 8000808:	f000 fbf6 	bl	8000ff8 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000812:	4845      	ldr	r0, [pc, #276]	@ (8000928 <main+0x1b8>)
 8000814:	f001 fa32 	bl	8001c7c <HAL_GPIO_WritePin>
	  CS43L22_Beep(G5, 100);
 8000818:	2164      	movs	r1, #100	@ 0x64
 800081a:	2005      	movs	r0, #5
 800081c:	f7ff ff1c 	bl	8000658 <CS43L22_Beep>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000826:	4840      	ldr	r0, [pc, #256]	@ (8000928 <main+0x1b8>)
 8000828:	f001 fa28 	bl	8001c7c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800082c:	2064      	movs	r0, #100	@ 0x64
 800082e:	f000 fbe3 	bl	8000ff8 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000838:	483b      	ldr	r0, [pc, #236]	@ (8000928 <main+0x1b8>)
 800083a:	f001 fa1f 	bl	8001c7c <HAL_GPIO_WritePin>
	  CS43L22_Beep(G5, 100);
 800083e:	2164      	movs	r1, #100	@ 0x64
 8000840:	2005      	movs	r0, #5
 8000842:	f7ff ff09 	bl	8000658 <CS43L22_Beep>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800084c:	4836      	ldr	r0, [pc, #216]	@ (8000928 <main+0x1b8>)
 800084e:	f001 fa15 	bl	8001c7c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000852:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000856:	f000 fbcf 	bl	8000ff8 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000860:	4831      	ldr	r0, [pc, #196]	@ (8000928 <main+0x1b8>)
 8000862:	f001 fa0b 	bl	8001c7c <HAL_GPIO_WritePin>
	  CS43L22_Beep(A5, 100);
 8000866:	2164      	movs	r1, #100	@ 0x64
 8000868:	2006      	movs	r0, #6
 800086a:	f7ff fef5 	bl	8000658 <CS43L22_Beep>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000874:	482c      	ldr	r0, [pc, #176]	@ (8000928 <main+0x1b8>)
 8000876:	f001 fa01 	bl	8001c7c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800087a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800087e:	f000 fbbb 	bl	8000ff8 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000888:	4827      	ldr	r0, [pc, #156]	@ (8000928 <main+0x1b8>)
 800088a:	f001 f9f7 	bl	8001c7c <HAL_GPIO_WritePin>
	  CS43L22_Beep(G5, 100);
 800088e:	2164      	movs	r1, #100	@ 0x64
 8000890:	2005      	movs	r0, #5
 8000892:	f7ff fee1 	bl	8000658 <CS43L22_Beep>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800089c:	4822      	ldr	r0, [pc, #136]	@ (8000928 <main+0x1b8>)
 800089e:	f001 f9ed 	bl	8001c7c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80008a2:	2064      	movs	r0, #100	@ 0x64
 80008a4:	f000 fba8 	bl	8000ff8 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008ae:	481e      	ldr	r0, [pc, #120]	@ (8000928 <main+0x1b8>)
 80008b0:	f001 f9e4 	bl	8001c7c <HAL_GPIO_WritePin>
	  CS43L22_Beep(F5, 100);
 80008b4:	2164      	movs	r1, #100	@ 0x64
 80008b6:	2004      	movs	r0, #4
 80008b8:	f7ff fece 	bl	8000658 <CS43L22_Beep>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008c2:	4819      	ldr	r0, [pc, #100]	@ (8000928 <main+0x1b8>)
 80008c4:	f001 f9da 	bl	8001c7c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80008c8:	2064      	movs	r0, #100	@ 0x64
 80008ca:	f000 fb95 	bl	8000ff8 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008d4:	4814      	ldr	r0, [pc, #80]	@ (8000928 <main+0x1b8>)
 80008d6:	f001 f9d1 	bl	8001c7c <HAL_GPIO_WritePin>
	  CS43L22_Beep(E5, 100);
 80008da:	2164      	movs	r1, #100	@ 0x64
 80008dc:	2003      	movs	r0, #3
 80008de:	f7ff febb 	bl	8000658 <CS43L22_Beep>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008e8:	480f      	ldr	r0, [pc, #60]	@ (8000928 <main+0x1b8>)
 80008ea:	f001 f9c7 	bl	8001c7c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80008ee:	2064      	movs	r0, #100	@ 0x64
 80008f0:	f000 fb82 	bl	8000ff8 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008fa:	480b      	ldr	r0, [pc, #44]	@ (8000928 <main+0x1b8>)
 80008fc:	f001 f9be 	bl	8001c7c <HAL_GPIO_WritePin>
	  CS43L22_Beep(A5, 100);
 8000900:	2164      	movs	r1, #100	@ 0x64
 8000902:	2006      	movs	r0, #6
 8000904:	f7ff fea8 	bl	8000658 <CS43L22_Beep>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800090e:	4806      	ldr	r0, [pc, #24]	@ (8000928 <main+0x1b8>)
 8000910:	f001 f9b4 	bl	8001c7c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000914:	2064      	movs	r0, #100	@ 0x64
 8000916:	f000 fb6f 	bl	8000ff8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800091a:	bf00      	nop
 800091c:	e73d      	b.n	800079a <main+0x2a>
 800091e:	bf00      	nop
 8000920:	20000124 	.word	0x20000124
 8000924:	2000007c 	.word	0x2000007c
 8000928:	40020c00 	.word	0x40020c00

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	@ 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2230      	movs	r2, #48	@ 0x30
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f003 f982 	bl	8003c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 8000950:	4b2b      	ldr	r3, [pc, #172]	@ (8000a00 <SystemClock_Config+0xd4>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000958:	4a29      	ldr	r2, [pc, #164]	@ (8000a00 <SystemClock_Config+0xd4>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000960:	4b27      	ldr	r3, [pc, #156]	@ (8000a00 <SystemClock_Config+0xd4>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	4a26      	ldr	r2, [pc, #152]	@ (8000a00 <SystemClock_Config+0xd4>)
 8000966:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800096a:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	4b23      	ldr	r3, [pc, #140]	@ (8000a00 <SystemClock_Config+0xd4>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000974:	4a22      	ldr	r2, [pc, #136]	@ (8000a00 <SystemClock_Config+0xd4>)
 8000976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097a:	6413      	str	r3, [r2, #64]	@ 0x40
 800097c:	4b20      	ldr	r3, [pc, #128]	@ (8000a00 <SystemClock_Config+0xd4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <SystemClock_Config+0xd8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a1c      	ldr	r2, [pc, #112]	@ (8000a04 <SystemClock_Config+0xd8>)
 8000992:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <SystemClock_Config+0xd8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a4:	2302      	movs	r3, #2
 80009a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a8:	2301      	movs	r3, #1
 80009aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ac:	2310      	movs	r3, #16
 80009ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b4:	2300      	movs	r3, #0
 80009b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 fbbb 	bl	8003138 <HAL_RCC_OscConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80009c8:	f000 f8fa 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009cc:	230f      	movs	r3, #15
 80009ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 fe1e 	bl	8003628 <HAL_RCC_ClockConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009f2:	f000 f8e5 	bl	8000bc0 <Error_Handler>
  }
}
 80009f6:	bf00      	nop
 80009f8:	3750      	adds	r7, #80	@ 0x50
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40007000 	.word	0x40007000

08000a08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_I2C1_Init+0x50>)
 8000a0e:	4a13      	ldr	r2, [pc, #76]	@ (8000a5c <MX_I2C1_Init+0x54>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_I2C1_Init+0x50>)
 8000a14:	4a12      	ldr	r2, [pc, #72]	@ (8000a60 <MX_I2C1_Init+0x58>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_I2C1_Init+0x50>)
 8000a26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <MX_I2C1_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_I2C1_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <MX_I2C1_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_I2C1_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <MX_I2C1_Init+0x50>)
 8000a46:	f001 f933 	bl	8001cb0 <HAL_I2C_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a50:	f000 f8b6 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000028 	.word	0x20000028
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	000186a0 	.word	0x000186a0

08000a64 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a68:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <MX_I2S3_Init+0x54>)
 8000a6a:	4a14      	ldr	r2, [pc, #80]	@ (8000abc <MX_I2S3_Init+0x58>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a6e:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <MX_I2S3_Init+0x54>)
 8000a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a74:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <MX_I2S3_Init+0x54>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <MX_I2S3_Init+0x54>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a82:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <MX_I2S3_Init+0x54>)
 8000a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a88:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <MX_I2S3_Init+0x54>)
 8000a8c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000a90:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <MX_I2S3_Init+0x54>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a98:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <MX_I2S3_Init+0x54>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <MX_I2S3_Init+0x54>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	@ (8000ab8 <MX_I2S3_Init+0x54>)
 8000aa6:	f001 fda1 	bl	80025ec <HAL_I2S_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000ab0:	f000 f886 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000007c 	.word	0x2000007c
 8000abc:	40003c00 	.word	0x40003c00

08000ac0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_DMA_Init+0x3c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a0b      	ldr	r2, [pc, #44]	@ (8000afc <MX_DMA_Init+0x3c>)
 8000ad0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_DMA_Init+0x3c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2010      	movs	r0, #16
 8000ae8:	f000 fb85 	bl	80011f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000aec:	2010      	movs	r0, #16
 8000aee:	f000 fb9e 	bl	800122e <HAL_NVIC_EnableIRQ>

}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a26      	ldr	r2, [pc, #152]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a11      	ldr	r2, [pc, #68]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000b86:	2200      	movs	r2, #0
 8000b88:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000b8c:	480b      	ldr	r0, [pc, #44]	@ (8000bbc <MX_GPIO_Init+0xbc>)
 8000b8e:	f001 f875 	bl	8001c7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000b92:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000b96:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4804      	ldr	r0, [pc, #16]	@ (8000bbc <MX_GPIO_Init+0xbc>)
 8000bac:	f000 feca 	bl	8001944 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	@ 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020c00 	.word	0x40020c00

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <Error_Handler+0x8>

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	4a0f      	ldr	r2, [pc, #60]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	4a08      	ldr	r2, [pc, #32]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	@ 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a19      	ldr	r2, [pc, #100]	@ (8000ca0 <HAL_I2C_MspInit+0x84>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d12c      	bne.n	8000c98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a17      	ldr	r2, [pc, #92]	@ (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000c5a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	480c      	ldr	r0, [pc, #48]	@ (8000ca8 <HAL_I2C_MspInit+0x8c>)
 8000c78:	f000 fe64 	bl	8001944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c84:	4a07      	ldr	r2, [pc, #28]	@ (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c98:	bf00      	nop
 8000c9a:	3728      	adds	r7, #40	@ 0x28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020400 	.word	0x40020400

08000cac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	@ 0x38
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a4e      	ldr	r2, [pc, #312]	@ (8000e10 <HAL_I2S_MspInit+0x164>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	f040 8094 	bne.w	8000e06 <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ce2:	23c0      	movs	r3, #192	@ 0xc0
 8000ce4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 fe66 	bl	80039c0 <HAL_RCCEx_PeriphCLKConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000cfa:	f7ff ff61 	bl	8000bc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b44      	ldr	r3, [pc, #272]	@ (8000e14 <HAL_I2S_MspInit+0x168>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	4a43      	ldr	r2, [pc, #268]	@ (8000e14 <HAL_I2S_MspInit+0x168>)
 8000d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0e:	4b41      	ldr	r3, [pc, #260]	@ (8000e14 <HAL_I2S_MspInit+0x168>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e14 <HAL_I2S_MspInit+0x168>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a3c      	ldr	r2, [pc, #240]	@ (8000e14 <HAL_I2S_MspInit+0x168>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e14 <HAL_I2S_MspInit+0x168>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	4b36      	ldr	r3, [pc, #216]	@ (8000e14 <HAL_I2S_MspInit+0x168>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a35      	ldr	r2, [pc, #212]	@ (8000e14 <HAL_I2S_MspInit+0x168>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b33      	ldr	r3, [pc, #204]	@ (8000e14 <HAL_I2S_MspInit+0x168>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d52:	2310      	movs	r3, #16
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d62:	2306      	movs	r3, #6
 8000d64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	482a      	ldr	r0, [pc, #168]	@ (8000e18 <HAL_I2S_MspInit+0x16c>)
 8000d6e:	f000 fde9 	bl	8001944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000d72:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d84:	2306      	movs	r3, #6
 8000d86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4823      	ldr	r0, [pc, #140]	@ (8000e1c <HAL_I2S_MspInit+0x170>)
 8000d90:	f000 fdd8 	bl	8001944 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000d94:	4b22      	ldr	r3, [pc, #136]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000d96:	4a23      	ldr	r2, [pc, #140]	@ (8000e24 <HAL_I2S_MspInit+0x178>)
 8000d98:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000da2:	2240      	movs	r2, #64	@ 0x40
 8000da4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dac:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000dae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000db2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000db6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dba:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000dbe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dc2:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000dc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dca:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000dda:	2203      	movs	r2, #3
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000de4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000dea:	480d      	ldr	r0, [pc, #52]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000dec:	f000 fa3a 	bl	8001264 <HAL_DMA_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8000df6:	f7ff fee3 	bl	8000bc0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a08      	ldr	r2, [pc, #32]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000dfe:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e00:	4a07      	ldr	r2, [pc, #28]	@ (8000e20 <HAL_I2S_MspInit+0x174>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3738      	adds	r7, #56	@ 0x38
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40003c00 	.word	0x40003c00
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	200000c4 	.word	0x200000c4
 8000e24:	40026088 	.word	0x40026088

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <NMI_Handler+0x4>

08000e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <MemManage_Handler+0x4>

08000e40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7e:	f000 f89b 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <DMA1_Stream5_IRQHandler+0x10>)
 8000e8e:	f000 faef 	bl	8001470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200000c4 	.word	0x200000c4

08000e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <SystemInit+0x20>)
 8000ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ea6:	4a05      	ldr	r2, [pc, #20]	@ (8000ebc <SystemInit+0x20>)
 8000ea8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ec0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ef8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ec4:	f7ff ffea 	bl	8000e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	@ (8000efc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	@ (8000f00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8000f0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eee:	f002 feb1 	bl	8003c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef2:	f7ff fc3d 	bl	8000770 <main>
  bx  lr    
 8000ef6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ef8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f04:	08003ce4 	.word	0x08003ce4
  ldr r2, =_sbss
 8000f08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f0c:	200001f0 	.word	0x200001f0

08000f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC_IRQHandler>
	...

08000f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f18:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f54 <HAL_Init+0x40>)
 8000f1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f24:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <HAL_Init+0x40>)
 8000f2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	@ (8000f54 <HAL_Init+0x40>)
 8000f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f94f 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	200f      	movs	r0, #15
 8000f44:	f000 f808 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fe40 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023c00 	.word	0x40023c00

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_InitTick+0x54>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <HAL_InitTick+0x58>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f967 	bl	800124a <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f000 f92f 	bl	80011f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	@ (8000fb4 <HAL_InitTick+0x5c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	200001ec 	.word	0x200001ec

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	@ (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	200001ec 	.word	0x200001ec

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff ffee 	bl	8000fe0 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_Delay+0x44>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffde 	bl	8000fe0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	@ (80010dc <__NVIC_EnableIRQ+0x38>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	@ (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	@ (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	@ 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	@ 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f7ff ff8e 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff29 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001208:	f7ff ff3e 	bl	8001088 <__NVIC_GetPriorityGrouping>
 800120c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff ff8e 	bl	8001134 <NVIC_EncodePriority>
 8001218:	4602      	mov	r2, r0
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5d 	bl	80010e0 <__NVIC_SetPriority>
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff31 	bl	80010a4 <__NVIC_EnableIRQ>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffa2 	bl	800119c <SysTick_Config>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff feb6 	bl	8000fe0 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e099      	b.n	80013b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2202      	movs	r2, #2
 8001284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0201 	bic.w	r2, r2, #1
 800129e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a0:	e00f      	b.n	80012c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012a2:	f7ff fe9d 	bl	8000fe0 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	d908      	bls.n	80012c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2220      	movs	r2, #32
 80012b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2203      	movs	r2, #3
 80012ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e078      	b.n	80013b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1e8      	bne.n	80012a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	4b38      	ldr	r3, [pc, #224]	@ (80013bc <HAL_DMA_Init+0x158>)
 80012dc:	4013      	ands	r3, r2
 80012de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4313      	orrs	r3, r2
 8001312:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001318:	2b04      	cmp	r3, #4
 800131a:	d107      	bne.n	800132c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001324:	4313      	orrs	r3, r2
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	4313      	orrs	r3, r2
 800132a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f023 0307 	bic.w	r3, r3, #7
 8001342:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	4313      	orrs	r3, r2
 800134c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001352:	2b04      	cmp	r3, #4
 8001354:	d117      	bne.n	8001386 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4313      	orrs	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00e      	beq.n	8001386 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 fa6f 	bl	800184c <DMA_CheckFifoParam>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2240      	movs	r2, #64	@ 0x40
 8001378:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001382:	2301      	movs	r3, #1
 8001384:	e016      	b.n	80013b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 fa26 	bl	80017e0 <DMA_CalcBaseAndBitshift>
 8001394:	4603      	mov	r3, r0
 8001396:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800139c:	223f      	movs	r2, #63	@ 0x3f
 800139e:	409a      	lsls	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	f010803f 	.word	0xf010803f

080013c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d101      	bne.n	80013e6 <HAL_DMA_Start_IT+0x26>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e040      	b.n	8001468 <HAL_DMA_Start_IT+0xa8>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d12f      	bne.n	800145a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2202      	movs	r2, #2
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 f9b8 	bl	8001784 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001418:	223f      	movs	r2, #63	@ 0x3f
 800141a:	409a      	lsls	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0216 	orr.w	r2, r2, #22
 800142e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	2b00      	cmp	r3, #0
 8001436:	d007      	beq.n	8001448 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0208 	orr.w	r2, r2, #8
 8001446:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0201 	orr.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e005      	b.n	8001466 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001462:	2302      	movs	r3, #2
 8001464:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001466:	7dfb      	ldrb	r3, [r7, #23]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800147c:	4b8e      	ldr	r3, [pc, #568]	@ (80016b8 <HAL_DMA_IRQHandler+0x248>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a8e      	ldr	r2, [pc, #568]	@ (80016bc <HAL_DMA_IRQHandler+0x24c>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0a9b      	lsrs	r3, r3, #10
 8001488:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800149a:	2208      	movs	r2, #8
 800149c:	409a      	lsls	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d01a      	beq.n	80014dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0204 	bic.w	r2, r2, #4
 80014c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c8:	2208      	movs	r2, #8
 80014ca:	409a      	lsls	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e0:	2201      	movs	r2, #1
 80014e2:	409a      	lsls	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d012      	beq.n	8001512 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014fe:	2201      	movs	r2, #1
 8001500:	409a      	lsls	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800150a:	f043 0202 	orr.w	r2, r3, #2
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001516:	2204      	movs	r2, #4
 8001518:	409a      	lsls	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d012      	beq.n	8001548 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001534:	2204      	movs	r2, #4
 8001536:	409a      	lsls	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001540:	f043 0204 	orr.w	r2, r3, #4
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800154c:	2210      	movs	r2, #16
 800154e:	409a      	lsls	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d043      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d03c      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156a:	2210      	movs	r2, #16
 800156c:	409a      	lsls	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d018      	beq.n	80015b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d108      	bne.n	80015a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	2b00      	cmp	r3, #0
 8001594:	d024      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	4798      	blx	r3
 800159e:	e01f      	b.n	80015e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01b      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	4798      	blx	r3
 80015b0:	e016      	b.n	80015e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d107      	bne.n	80015d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0208 	bic.w	r2, r2, #8
 80015ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e4:	2220      	movs	r2, #32
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 808f 	beq.w	8001710 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8087 	beq.w	8001710 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001606:	2220      	movs	r2, #32
 8001608:	409a      	lsls	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b05      	cmp	r3, #5
 8001618:	d136      	bne.n	8001688 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0216 	bic.w	r2, r2, #22
 8001628:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001638:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	2b00      	cmp	r3, #0
 8001640:	d103      	bne.n	800164a <HAL_DMA_IRQHandler+0x1da>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0208 	bic.w	r2, r2, #8
 8001658:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165e:	223f      	movs	r2, #63	@ 0x3f
 8001660:	409a      	lsls	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800167a:	2b00      	cmp	r3, #0
 800167c:	d07e      	beq.n	800177c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	4798      	blx	r3
        }
        return;
 8001686:	e079      	b.n	800177c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01d      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10d      	bne.n	80016c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d031      	beq.n	8001710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	4798      	blx	r3
 80016b4:	e02c      	b.n	8001710 <HAL_DMA_IRQHandler+0x2a0>
 80016b6:	bf00      	nop
 80016b8:	20000000 	.word	0x20000000
 80016bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d023      	beq.n	8001710 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	4798      	blx	r3
 80016d0:	e01e      	b.n	8001710 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10f      	bne.n	8001700 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0210 	bic.w	r2, r2, #16
 80016ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001714:	2b00      	cmp	r3, #0
 8001716:	d032      	beq.n	800177e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d022      	beq.n	800176a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2205      	movs	r2, #5
 8001728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	3301      	adds	r3, #1
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	429a      	cmp	r2, r3
 8001746:	d307      	bcc.n	8001758 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f2      	bne.n	800173c <HAL_DMA_IRQHandler+0x2cc>
 8001756:	e000      	b.n	800175a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001758:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	4798      	blx	r3
 800177a:	e000      	b.n	800177e <HAL_DMA_IRQHandler+0x30e>
        return;
 800177c:	bf00      	nop
    }
  }
}
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80017a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b40      	cmp	r3, #64	@ 0x40
 80017b0:	d108      	bne.n	80017c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017c2:	e007      	b.n	80017d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	60da      	str	r2, [r3, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	3b10      	subs	r3, #16
 80017f0:	4a14      	ldr	r2, [pc, #80]	@ (8001844 <DMA_CalcBaseAndBitshift+0x64>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017fa:	4a13      	ldr	r2, [pc, #76]	@ (8001848 <DMA_CalcBaseAndBitshift+0x68>)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d909      	bls.n	8001822 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001816:	f023 0303 	bic.w	r3, r3, #3
 800181a:	1d1a      	adds	r2, r3, #4
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001820:	e007      	b.n	8001832 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	aaaaaaab 	.word	0xaaaaaaab
 8001848:	08003ccc 	.word	0x08003ccc

0800184c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d11f      	bne.n	80018a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d856      	bhi.n	800191a <DMA_CheckFifoParam+0xce>
 800186c:	a201      	add	r2, pc, #4	@ (adr r2, 8001874 <DMA_CheckFifoParam+0x28>)
 800186e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001872:	bf00      	nop
 8001874:	08001885 	.word	0x08001885
 8001878:	08001897 	.word	0x08001897
 800187c:	08001885 	.word	0x08001885
 8001880:	0800191b 	.word	0x0800191b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001888:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d046      	beq.n	800191e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001894:	e043      	b.n	800191e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800189e:	d140      	bne.n	8001922 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018a4:	e03d      	b.n	8001922 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018ae:	d121      	bne.n	80018f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d837      	bhi.n	8001926 <DMA_CheckFifoParam+0xda>
 80018b6:	a201      	add	r2, pc, #4	@ (adr r2, 80018bc <DMA_CheckFifoParam+0x70>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	080018cd 	.word	0x080018cd
 80018c0:	080018d3 	.word	0x080018d3
 80018c4:	080018cd 	.word	0x080018cd
 80018c8:	080018e5 	.word	0x080018e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
      break;
 80018d0:	e030      	b.n	8001934 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d025      	beq.n	800192a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018e2:	e022      	b.n	800192a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80018ec:	d11f      	bne.n	800192e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018f2:	e01c      	b.n	800192e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d903      	bls.n	8001902 <DMA_CheckFifoParam+0xb6>
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d003      	beq.n	8001908 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001900:	e018      	b.n	8001934 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
      break;
 8001906:	e015      	b.n	8001934 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00e      	beq.n	8001932 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
      break;
 8001918:	e00b      	b.n	8001932 <DMA_CheckFifoParam+0xe6>
      break;
 800191a:	bf00      	nop
 800191c:	e00a      	b.n	8001934 <DMA_CheckFifoParam+0xe8>
      break;
 800191e:	bf00      	nop
 8001920:	e008      	b.n	8001934 <DMA_CheckFifoParam+0xe8>
      break;
 8001922:	bf00      	nop
 8001924:	e006      	b.n	8001934 <DMA_CheckFifoParam+0xe8>
      break;
 8001926:	bf00      	nop
 8001928:	e004      	b.n	8001934 <DMA_CheckFifoParam+0xe8>
      break;
 800192a:	bf00      	nop
 800192c:	e002      	b.n	8001934 <DMA_CheckFifoParam+0xe8>
      break;   
 800192e:	bf00      	nop
 8001930:	e000      	b.n	8001934 <DMA_CheckFifoParam+0xe8>
      break;
 8001932:	bf00      	nop
    }
  } 
  
  return status; 
 8001934:	7bfb      	ldrb	r3, [r7, #15]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop

08001944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	e16b      	b.n	8001c38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001960:	2201      	movs	r2, #1
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	429a      	cmp	r2, r3
 800197a:	f040 815a 	bne.w	8001c32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d005      	beq.n	8001996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001992:	2b02      	cmp	r3, #2
 8001994:	d130      	bne.n	80019f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2203      	movs	r2, #3
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 0201 	and.w	r2, r3, #1
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d017      	beq.n	8001a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d123      	bne.n	8001a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	08da      	lsrs	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3208      	adds	r2, #8
 8001a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	08da      	lsrs	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3208      	adds	r2, #8
 8001a82:	69b9      	ldr	r1, [r7, #24]
 8001a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0203 	and.w	r2, r3, #3
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80b4 	beq.w	8001c32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b60      	ldr	r3, [pc, #384]	@ (8001c50 <HAL_GPIO_Init+0x30c>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad2:	4a5f      	ldr	r2, [pc, #380]	@ (8001c50 <HAL_GPIO_Init+0x30c>)
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ada:	4b5d      	ldr	r3, [pc, #372]	@ (8001c50 <HAL_GPIO_Init+0x30c>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ae6:	4a5b      	ldr	r2, [pc, #364]	@ (8001c54 <HAL_GPIO_Init+0x310>)
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	3302      	adds	r3, #2
 8001aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	220f      	movs	r2, #15
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a52      	ldr	r2, [pc, #328]	@ (8001c58 <HAL_GPIO_Init+0x314>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d02b      	beq.n	8001b6a <HAL_GPIO_Init+0x226>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a51      	ldr	r2, [pc, #324]	@ (8001c5c <HAL_GPIO_Init+0x318>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d025      	beq.n	8001b66 <HAL_GPIO_Init+0x222>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a50      	ldr	r2, [pc, #320]	@ (8001c60 <HAL_GPIO_Init+0x31c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d01f      	beq.n	8001b62 <HAL_GPIO_Init+0x21e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4f      	ldr	r2, [pc, #316]	@ (8001c64 <HAL_GPIO_Init+0x320>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d019      	beq.n	8001b5e <HAL_GPIO_Init+0x21a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c68 <HAL_GPIO_Init+0x324>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0x216>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4d      	ldr	r2, [pc, #308]	@ (8001c6c <HAL_GPIO_Init+0x328>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00d      	beq.n	8001b56 <HAL_GPIO_Init+0x212>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c70 <HAL_GPIO_Init+0x32c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0x20e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4b      	ldr	r2, [pc, #300]	@ (8001c74 <HAL_GPIO_Init+0x330>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_GPIO_Init+0x20a>
 8001b4a:	2307      	movs	r3, #7
 8001b4c:	e00e      	b.n	8001b6c <HAL_GPIO_Init+0x228>
 8001b4e:	2308      	movs	r3, #8
 8001b50:	e00c      	b.n	8001b6c <HAL_GPIO_Init+0x228>
 8001b52:	2306      	movs	r3, #6
 8001b54:	e00a      	b.n	8001b6c <HAL_GPIO_Init+0x228>
 8001b56:	2305      	movs	r3, #5
 8001b58:	e008      	b.n	8001b6c <HAL_GPIO_Init+0x228>
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x228>
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e004      	b.n	8001b6c <HAL_GPIO_Init+0x228>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e002      	b.n	8001b6c <HAL_GPIO_Init+0x228>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_GPIO_Init+0x228>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	f002 0203 	and.w	r2, r2, #3
 8001b72:	0092      	lsls	r2, r2, #2
 8001b74:	4093      	lsls	r3, r2
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b7c:	4935      	ldr	r1, [pc, #212]	@ (8001c54 <HAL_GPIO_Init+0x310>)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c78 <HAL_GPIO_Init+0x334>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bae:	4a32      	ldr	r2, [pc, #200]	@ (8001c78 <HAL_GPIO_Init+0x334>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb4:	4b30      	ldr	r3, [pc, #192]	@ (8001c78 <HAL_GPIO_Init+0x334>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd8:	4a27      	ldr	r2, [pc, #156]	@ (8001c78 <HAL_GPIO_Init+0x334>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bde:	4b26      	ldr	r3, [pc, #152]	@ (8001c78 <HAL_GPIO_Init+0x334>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c02:	4a1d      	ldr	r2, [pc, #116]	@ (8001c78 <HAL_GPIO_Init+0x334>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <HAL_GPIO_Init+0x334>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c2c:	4a12      	ldr	r2, [pc, #72]	@ (8001c78 <HAL_GPIO_Init+0x334>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3301      	adds	r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	2b0f      	cmp	r3, #15
 8001c3c:	f67f ae90 	bls.w	8001960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3724      	adds	r7, #36	@ 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40013800 	.word	0x40013800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	40020800 	.word	0x40020800
 8001c64:	40020c00 	.word	0x40020c00
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40021400 	.word	0x40021400
 8001c70:	40021800 	.word	0x40021800
 8001c74:	40021c00 	.word	0x40021c00
 8001c78:	40013c00 	.word	0x40013c00

08001c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c98:	e003      	b.n	8001ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	041a      	lsls	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	619a      	str	r2, [r3, #24]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e12b      	b.n	8001f1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe ffa0 	bl	8000c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2224      	movs	r2, #36	@ 0x24
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d14:	f001 fe40 	bl	8003998 <HAL_RCC_GetPCLK1Freq>
 8001d18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4a81      	ldr	r2, [pc, #516]	@ (8001f24 <HAL_I2C_Init+0x274>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d807      	bhi.n	8001d34 <HAL_I2C_Init+0x84>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4a80      	ldr	r2, [pc, #512]	@ (8001f28 <HAL_I2C_Init+0x278>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	bf94      	ite	ls
 8001d2c:	2301      	movls	r3, #1
 8001d2e:	2300      	movhi	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	e006      	b.n	8001d42 <HAL_I2C_Init+0x92>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4a7d      	ldr	r2, [pc, #500]	@ (8001f2c <HAL_I2C_Init+0x27c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	bf94      	ite	ls
 8001d3c:	2301      	movls	r3, #1
 8001d3e:	2300      	movhi	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0e7      	b.n	8001f1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4a78      	ldr	r2, [pc, #480]	@ (8001f30 <HAL_I2C_Init+0x280>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	0c9b      	lsrs	r3, r3, #18
 8001d54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a6a      	ldr	r2, [pc, #424]	@ (8001f24 <HAL_I2C_Init+0x274>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d802      	bhi.n	8001d84 <HAL_I2C_Init+0xd4>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	3301      	adds	r3, #1
 8001d82:	e009      	b.n	8001d98 <HAL_I2C_Init+0xe8>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d8a:	fb02 f303 	mul.w	r3, r2, r3
 8001d8e:	4a69      	ldr	r2, [pc, #420]	@ (8001f34 <HAL_I2C_Init+0x284>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	099b      	lsrs	r3, r3, #6
 8001d96:	3301      	adds	r3, #1
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	430b      	orrs	r3, r1
 8001d9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001daa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	495c      	ldr	r1, [pc, #368]	@ (8001f24 <HAL_I2C_Init+0x274>)
 8001db4:	428b      	cmp	r3, r1
 8001db6:	d819      	bhi.n	8001dec <HAL_I2C_Init+0x13c>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1e59      	subs	r1, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc6:	1c59      	adds	r1, r3, #1
 8001dc8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001dcc:	400b      	ands	r3, r1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00a      	beq.n	8001de8 <HAL_I2C_Init+0x138>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1e59      	subs	r1, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001de0:	3301      	adds	r3, #1
 8001de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de6:	e051      	b.n	8001e8c <HAL_I2C_Init+0x1dc>
 8001de8:	2304      	movs	r3, #4
 8001dea:	e04f      	b.n	8001e8c <HAL_I2C_Init+0x1dc>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d111      	bne.n	8001e18 <HAL_I2C_Init+0x168>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1e58      	subs	r0, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	440b      	add	r3, r1
 8001e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	e012      	b.n	8001e3e <HAL_I2C_Init+0x18e>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1e58      	subs	r0, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	0099      	lsls	r1, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_I2C_Init+0x196>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e022      	b.n	8001e8c <HAL_I2C_Init+0x1dc>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10e      	bne.n	8001e6c <HAL_I2C_Init+0x1bc>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1e58      	subs	r0, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6859      	ldr	r1, [r3, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	440b      	add	r3, r1
 8001e5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e6a:	e00f      	b.n	8001e8c <HAL_I2C_Init+0x1dc>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1e58      	subs	r0, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	0099      	lsls	r1, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e82:	3301      	adds	r3, #1
 8001e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	6809      	ldr	r1, [r1, #0]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001eba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6911      	ldr	r1, [r2, #16]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68d2      	ldr	r2, [r2, #12]
 8001ec6:	4311      	orrs	r1, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	000186a0 	.word	0x000186a0
 8001f28:	001e847f 	.word	0x001e847f
 8001f2c:	003d08ff 	.word	0x003d08ff
 8001f30:	431bde83 	.word	0x431bde83
 8001f34:	10624dd3 	.word	0x10624dd3

08001f38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	461a      	mov	r2, r3
 8001f44:	460b      	mov	r3, r1
 8001f46:	817b      	strh	r3, [r7, #10]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff f848 	bl	8000fe0 <HAL_GetTick>
 8001f50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	f040 80e0 	bne.w	8002120 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2319      	movs	r3, #25
 8001f66:	2201      	movs	r2, #1
 8001f68:	4970      	ldr	r1, [pc, #448]	@ (800212c <HAL_I2C_Master_Transmit+0x1f4>)
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f964 	bl	8002238 <I2C_WaitOnFlagUntilTimeout>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f76:	2302      	movs	r3, #2
 8001f78:	e0d3      	b.n	8002122 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_I2C_Master_Transmit+0x50>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e0cc      	b.n	8002122 <HAL_I2C_Master_Transmit+0x1ea>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d007      	beq.n	8001fae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0201 	orr.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2221      	movs	r2, #33	@ 0x21
 8001fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2210      	movs	r2, #16
 8001fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	893a      	ldrh	r2, [r7, #8]
 8001fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4a50      	ldr	r2, [pc, #320]	@ (8002130 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ff0:	8979      	ldrh	r1, [r7, #10]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	6a3a      	ldr	r2, [r7, #32]
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f89c 	bl	8002134 <I2C_MasterRequestWrite>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e08d      	b.n	8002122 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800201c:	e066      	b.n	80020ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	6a39      	ldr	r1, [r7, #32]
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 fa22 	bl	800246c <I2C_WaitOnTXEFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00d      	beq.n	800204a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	2b04      	cmp	r3, #4
 8002034:	d107      	bne.n	8002046 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002044:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e06b      	b.n	8002122 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	781a      	ldrb	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b04      	cmp	r3, #4
 8002086:	d11b      	bne.n	80020c0 <HAL_I2C_Master_Transmit+0x188>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	d017      	beq.n	80020c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	6a39      	ldr	r1, [r7, #32]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 fa19 	bl	80024fc <I2C_WaitOnBTFFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00d      	beq.n	80020ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d107      	bne.n	80020e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e01a      	b.n	8002122 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d194      	bne.n	800201e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	e000      	b.n	8002122 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002120:	2302      	movs	r3, #2
  }
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	00100002 	.word	0x00100002
 8002130:	ffff0000 	.word	0xffff0000

08002134 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	460b      	mov	r3, r1
 8002142:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002148:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d006      	beq.n	800215e <I2C_MasterRequestWrite+0x2a>
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d003      	beq.n	800215e <I2C_MasterRequestWrite+0x2a>
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800215c:	d108      	bne.n	8002170 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	e00b      	b.n	8002188 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002174:	2b12      	cmp	r3, #18
 8002176:	d107      	bne.n	8002188 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002186:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f84f 	bl	8002238 <I2C_WaitOnFlagUntilTimeout>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00d      	beq.n	80021bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ae:	d103      	bne.n	80021b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e035      	b.n	8002228 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021c4:	d108      	bne.n	80021d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021c6:	897b      	ldrh	r3, [r7, #10]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021d4:	611a      	str	r2, [r3, #16]
 80021d6:	e01b      	b.n	8002210 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021d8:	897b      	ldrh	r3, [r7, #10]
 80021da:	11db      	asrs	r3, r3, #7
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f003 0306 	and.w	r3, r3, #6
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f063 030f 	orn	r3, r3, #15
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	490e      	ldr	r1, [pc, #56]	@ (8002230 <I2C_MasterRequestWrite+0xfc>)
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f898 	bl	800232c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e010      	b.n	8002228 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002206:	897b      	ldrh	r3, [r7, #10]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4907      	ldr	r1, [pc, #28]	@ (8002234 <I2C_MasterRequestWrite+0x100>)
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f888 	bl	800232c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	00010008 	.word	0x00010008
 8002234:	00010002 	.word	0x00010002

08002238 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002248:	e048      	b.n	80022dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d044      	beq.n	80022dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002252:	f7fe fec5 	bl	8000fe0 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d302      	bcc.n	8002268 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d139      	bne.n	80022dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	0c1b      	lsrs	r3, r3, #16
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d10d      	bne.n	800228e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	43da      	mvns	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	4013      	ands	r3, r2
 800227e:	b29b      	uxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf0c      	ite	eq
 8002284:	2301      	moveq	r3, #1
 8002286:	2300      	movne	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	e00c      	b.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	43da      	mvns	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4013      	ands	r3, r2
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d116      	bne.n	80022dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c8:	f043 0220 	orr.w	r2, r3, #32
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e023      	b.n	8002324 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	0c1b      	lsrs	r3, r3, #16
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d10d      	bne.n	8002302 <I2C_WaitOnFlagUntilTimeout+0xca>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	43da      	mvns	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	4013      	ands	r3, r2
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	e00c      	b.n	800231c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	43da      	mvns	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	4013      	ands	r3, r2
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	429a      	cmp	r2, r3
 8002320:	d093      	beq.n	800224a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800233a:	e071      	b.n	8002420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800234a:	d123      	bne.n	8002394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800235a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002364:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	f043 0204 	orr.w	r2, r3, #4
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e067      	b.n	8002464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239a:	d041      	beq.n	8002420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239c:	f7fe fe20 	bl	8000fe0 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d302      	bcc.n	80023b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d136      	bne.n	8002420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	0c1b      	lsrs	r3, r3, #16
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d10c      	bne.n	80023d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	43da      	mvns	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4013      	ands	r3, r2
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	bf14      	ite	ne
 80023ce:	2301      	movne	r3, #1
 80023d0:	2300      	moveq	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	e00b      	b.n	80023ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	43da      	mvns	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	4013      	ands	r3, r2
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf14      	ite	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	2300      	moveq	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d016      	beq.n	8002420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	f043 0220 	orr.w	r2, r3, #32
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e021      	b.n	8002464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	0c1b      	lsrs	r3, r3, #16
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d10c      	bne.n	8002444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	43da      	mvns	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4013      	ands	r3, r2
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf14      	ite	ne
 800243c:	2301      	movne	r3, #1
 800243e:	2300      	moveq	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e00b      	b.n	800245c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4013      	ands	r3, r2
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	bf14      	ite	ne
 8002456:	2301      	movne	r3, #1
 8002458:	2300      	moveq	r3, #0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	f47f af6d 	bne.w	800233c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002478:	e034      	b.n	80024e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f886 	bl	800258c <I2C_IsAcknowledgeFailed>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e034      	b.n	80024f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d028      	beq.n	80024e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002492:	f7fe fda5 	bl	8000fe0 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d302      	bcc.n	80024a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d11d      	bne.n	80024e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b2:	2b80      	cmp	r3, #128	@ 0x80
 80024b4:	d016      	beq.n	80024e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e007      	b.n	80024f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ee:	2b80      	cmp	r3, #128	@ 0x80
 80024f0:	d1c3      	bne.n	800247a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002508:	e034      	b.n	8002574 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f83e 	bl	800258c <I2C_IsAcknowledgeFailed>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e034      	b.n	8002584 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d028      	beq.n	8002574 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002522:	f7fe fd5d 	bl	8000fe0 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	429a      	cmp	r2, r3
 8002530:	d302      	bcc.n	8002538 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d11d      	bne.n	8002574 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b04      	cmp	r3, #4
 8002544:	d016      	beq.n	8002574 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	f043 0220 	orr.w	r2, r3, #32
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e007      	b.n	8002584 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b04      	cmp	r3, #4
 8002580:	d1c3      	bne.n	800250a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a2:	d11b      	bne.n	80025dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	f043 0204 	orr.w	r2, r3, #4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e128      	b.n	8002850 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a90      	ldr	r2, [pc, #576]	@ (8002858 <HAL_I2S_Init+0x26c>)
 8002616:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7fe fb47 	bl	8000cac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2202      	movs	r2, #2
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002634:	f023 030f 	bic.w	r3, r3, #15
 8002638:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2202      	movs	r2, #2
 8002640:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d060      	beq.n	800270c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d102      	bne.n	8002658 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002652:	2310      	movs	r3, #16
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	e001      	b.n	800265c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002658:	2320      	movs	r3, #32
 800265a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b20      	cmp	r3, #32
 8002662:	d802      	bhi.n	800266a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800266a:	2001      	movs	r0, #1
 800266c:	f001 fa8a 	bl	8003b84 <HAL_RCCEx_GetPeriphCLKFreq>
 8002670:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800267a:	d125      	bne.n	80026c8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d010      	beq.n	80026a6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	fbb2 f2f3 	udiv	r2, r2, r3
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	461a      	mov	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a0:	3305      	adds	r3, #5
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	e01f      	b.n	80026e6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	461a      	mov	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	3305      	adds	r3, #5
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	e00e      	b.n	80026e6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	461a      	mov	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	3305      	adds	r3, #5
 80026e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4a5c      	ldr	r2, [pc, #368]	@ (800285c <HAL_I2S_Init+0x270>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	08db      	lsrs	r3, r3, #3
 80026f0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	e003      	b.n	8002714 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800270c:	2302      	movs	r3, #2
 800270e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d902      	bls.n	8002720 <HAL_I2S_Init+0x134>
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	2bff      	cmp	r3, #255	@ 0xff
 800271e:	d907      	bls.n	8002730 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002724:	f043 0210 	orr.w	r2, r3, #16
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e08f      	b.n	8002850 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	ea42 0103 	orr.w	r1, r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	430a      	orrs	r2, r1
 8002742:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800274e:	f023 030f 	bic.w	r3, r3, #15
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6851      	ldr	r1, [r2, #4]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6892      	ldr	r2, [r2, #8]
 800275a:	4311      	orrs	r1, r2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68d2      	ldr	r2, [r2, #12]
 8002760:	4311      	orrs	r1, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6992      	ldr	r2, [r2, #24]
 8002766:	430a      	orrs	r2, r1
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002772:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d161      	bne.n	8002840 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a38      	ldr	r2, [pc, #224]	@ (8002860 <HAL_I2S_Init+0x274>)
 8002780:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a37      	ldr	r2, [pc, #220]	@ (8002864 <HAL_I2S_Init+0x278>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <HAL_I2S_Init+0x1a4>
 800278c:	4b36      	ldr	r3, [pc, #216]	@ (8002868 <HAL_I2S_Init+0x27c>)
 800278e:	e001      	b.n	8002794 <HAL_I2S_Init+0x1a8>
 8002790:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	4932      	ldr	r1, [pc, #200]	@ (8002864 <HAL_I2S_Init+0x278>)
 800279c:	428a      	cmp	r2, r1
 800279e:	d101      	bne.n	80027a4 <HAL_I2S_Init+0x1b8>
 80027a0:	4a31      	ldr	r2, [pc, #196]	@ (8002868 <HAL_I2S_Init+0x27c>)
 80027a2:	e001      	b.n	80027a8 <HAL_I2S_Init+0x1bc>
 80027a4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80027a8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80027ac:	f023 030f 	bic.w	r3, r3, #15
 80027b0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002864 <HAL_I2S_Init+0x278>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_I2S_Init+0x1d4>
 80027bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002868 <HAL_I2S_Init+0x27c>)
 80027be:	e001      	b.n	80027c4 <HAL_I2S_Init+0x1d8>
 80027c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027c4:	2202      	movs	r2, #2
 80027c6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a25      	ldr	r2, [pc, #148]	@ (8002864 <HAL_I2S_Init+0x278>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_I2S_Init+0x1ea>
 80027d2:	4b25      	ldr	r3, [pc, #148]	@ (8002868 <HAL_I2S_Init+0x27c>)
 80027d4:	e001      	b.n	80027da <HAL_I2S_Init+0x1ee>
 80027d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027e6:	d003      	beq.n	80027f0 <HAL_I2S_Init+0x204>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d103      	bne.n	80027f8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80027f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	e001      	b.n	80027fc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002806:	4313      	orrs	r3, r2
 8002808:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002810:	4313      	orrs	r3, r2
 8002812:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800281a:	4313      	orrs	r3, r2
 800281c:	b29a      	uxth	r2, r3
 800281e:	897b      	ldrh	r3, [r7, #10]
 8002820:	4313      	orrs	r3, r2
 8002822:	b29b      	uxth	r3, r3
 8002824:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002828:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a0d      	ldr	r2, [pc, #52]	@ (8002864 <HAL_I2S_Init+0x278>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d101      	bne.n	8002838 <HAL_I2S_Init+0x24c>
 8002834:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <HAL_I2S_Init+0x27c>)
 8002836:	e001      	b.n	800283c <HAL_I2S_Init+0x250>
 8002838:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800283c:	897a      	ldrh	r2, [r7, #10]
 800283e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	08002b71 	.word	0x08002b71
 800285c:	cccccccd 	.word	0xcccccccd
 8002860:	08002c85 	.word	0x08002c85
 8002864:	40003800 	.word	0x40003800
 8002868:	40003400 	.word	0x40003400

0800286c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	4613      	mov	r3, r2
 8002878:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <HAL_I2S_Transmit_DMA+0x1a>
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e08e      	b.n	80029a8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_I2S_Transmit_DMA+0x2e>
 8002896:	2302      	movs	r3, #2
 8002898:	e086      	b.n	80029a8 <HAL_I2S_Transmit_DMA+0x13c>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d005      	beq.n	80028ba <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
 80028b8:	e076      	b.n	80029a8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2203      	movs	r2, #3
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d002      	beq.n	80028e6 <HAL_I2S_Transmit_DMA+0x7a>
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b05      	cmp	r3, #5
 80028e4:	d10a      	bne.n	80028fc <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028fa:	e005      	b.n	8002908 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	88fa      	ldrh	r2, [r7, #6]
 8002900:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	88fa      	ldrh	r2, [r7, #6]
 8002906:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290c:	4a28      	ldr	r2, [pc, #160]	@ (80029b0 <HAL_I2S_Transmit_DMA+0x144>)
 800290e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002914:	4a27      	ldr	r2, [pc, #156]	@ (80029b4 <HAL_I2S_Transmit_DMA+0x148>)
 8002916:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	4a26      	ldr	r2, [pc, #152]	@ (80029b8 <HAL_I2S_Transmit_DMA+0x14c>)
 800291e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002928:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002930:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002936:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002938:	f7fe fd42 	bl	80013c0 <HAL_DMA_Start_IT>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00f      	beq.n	8002962 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	f043 0208 	orr.w	r2, r3, #8
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e022      	b.n	80029a8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69da      	ldr	r2, [r3, #28]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800297e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d107      	bne.n	800299e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0202 	orr.w	r2, r2, #2
 800299c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	08002a4f 	.word	0x08002a4f
 80029b4:	08002a0d 	.word	0x08002a0d
 80029b8:	08002a6b 	.word	0x08002a6b

080029bc <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a18:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10e      	bne.n	8002a40 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0202 	bic.w	r2, r2, #2
 8002a30:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7ff ffc5 	bl	80029d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b084      	sub	sp, #16
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f7ff ffad 	bl	80029bc <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0203 	bic.w	r2, r2, #3
 8002a86:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa0:	f043 0208 	orr.w	r2, r3, #8
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f7ff ffa5 	bl	80029f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	881a      	ldrh	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	1c9a      	adds	r2, r3, #2
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10e      	bne.n	8002b0a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002afa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff63 	bl	80029d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	b292      	uxth	r2, r2
 8002b26:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	1c9a      	adds	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10e      	bne.n	8002b68 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b58:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ff3e 	bl	80029e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d13a      	bne.n	8002c02 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d109      	bne.n	8002baa <I2S_IRQHandler+0x3a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba0:	2b40      	cmp	r3, #64	@ 0x40
 8002ba2:	d102      	bne.n	8002baa <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff ffb4 	bl	8002b12 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb0:	2b40      	cmp	r3, #64	@ 0x40
 8002bb2:	d126      	bne.n	8002c02 <I2S_IRQHandler+0x92>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d11f      	bne.n	8002c02 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002bd0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf4:	f043 0202 	orr.w	r2, r3, #2
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff fefb 	bl	80029f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d136      	bne.n	8002c7c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d109      	bne.n	8002c2c <I2S_IRQHandler+0xbc>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c22:	2b80      	cmp	r3, #128	@ 0x80
 8002c24:	d102      	bne.n	8002c2c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff ff45 	bl	8002ab6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d122      	bne.n	8002c7c <I2S_IRQHandler+0x10c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d11b      	bne.n	8002c7c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c52:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6e:	f043 0204 	orr.w	r2, r3, #4
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff febe 	bl	80029f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a92      	ldr	r2, [pc, #584]	@ (8002ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002c9e:	4b92      	ldr	r3, [pc, #584]	@ (8002ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ca0:	e001      	b.n	8002ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002ca2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a8b      	ldr	r2, [pc, #556]	@ (8002ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002cbc:	4b8a      	ldr	r3, [pc, #552]	@ (8002ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cbe:	e001      	b.n	8002cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002cc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cd0:	d004      	beq.n	8002cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f040 8099 	bne.w	8002e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d107      	bne.n	8002cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f925 	bl	8002f40 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f9c8 	bl	80030a0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d16:	2b40      	cmp	r3, #64	@ 0x40
 8002d18:	d13a      	bne.n	8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d035      	beq.n	8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d101      	bne.n	8002d32 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002d2e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d30:	e001      	b.n	8002d36 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002d32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4969      	ldr	r1, [pc, #420]	@ (8002ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d3e:	428b      	cmp	r3, r1
 8002d40:	d101      	bne.n	8002d46 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002d42:	4b69      	ldr	r3, [pc, #420]	@ (8002ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d44:	e001      	b.n	8002d4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002d46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d4a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d4e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d5e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d82:	f043 0202 	orr.w	r2, r3, #2
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff fe34 	bl	80029f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	f040 80c3 	bne.w	8002f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80bd 	beq.w	8002f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002db6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a49      	ldr	r2, [pc, #292]	@ (8002ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002dc2:	4b49      	ldr	r3, [pc, #292]	@ (8002ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dc4:	e001      	b.n	8002dca <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002dc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4944      	ldr	r1, [pc, #272]	@ (8002ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dd2:	428b      	cmp	r3, r1
 8002dd4:	d101      	bne.n	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002dd6:	4b44      	ldr	r3, [pc, #272]	@ (8002ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dd8:	e001      	b.n	8002dde <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002dda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002de2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002de4:	2300      	movs	r3, #0
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	f043 0204 	orr.w	r2, r3, #4
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff fdf6 	bl	80029f8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e0c:	e089      	b.n	8002f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d107      	bne.n	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f8be 	bl	8002fa4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d107      	bne.n	8002e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f8fd 	bl	800303c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e48:	2b40      	cmp	r3, #64	@ 0x40
 8002e4a:	d12f      	bne.n	8002eac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d02a      	beq.n	8002eac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e64:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d101      	bne.n	8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002e70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e72:	e001      	b.n	8002e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002e74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4919      	ldr	r1, [pc, #100]	@ (8002ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e80:	428b      	cmp	r3, r1
 8002e82:	d101      	bne.n	8002e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002e84:	4b18      	ldr	r3, [pc, #96]	@ (8002ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e86:	e001      	b.n	8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002e88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e8c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e90:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	f043 0202 	orr.w	r2, r3, #2
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff fda6 	bl	80029f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d136      	bne.n	8002f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d031      	beq.n	8002f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a07      	ldr	r2, [pc, #28]	@ (8002ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d101      	bne.n	8002ece <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002eca:	4b07      	ldr	r3, [pc, #28]	@ (8002ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ecc:	e001      	b.n	8002ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002ece:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4902      	ldr	r1, [pc, #8]	@ (8002ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002eda:	428b      	cmp	r3, r1
 8002edc:	d106      	bne.n	8002eec <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002ede:	4b02      	ldr	r3, [pc, #8]	@ (8002ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ee0:	e006      	b.n	8002ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002ee2:	bf00      	nop
 8002ee4:	40003800 	.word	0x40003800
 8002ee8:	40003400 	.word	0x40003400
 8002eec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ef0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ef4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f04:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f12:	f043 0204 	orr.w	r2, r3, #4
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff fd6c 	bl	80029f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f20:	e000      	b.n	8002f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f22:	bf00      	nop
}
 8002f24:	bf00      	nop
 8002f26:	3720      	adds	r7, #32
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	1c99      	adds	r1, r3, #2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6251      	str	r1, [r2, #36]	@ 0x24
 8002f52:	881a      	ldrh	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d113      	bne.n	8002f9a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f80:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d106      	bne.n	8002f9a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ffc9 	bl	8002f2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb0:	1c99      	adds	r1, r3, #2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6251      	str	r1, [r2, #36]	@ 0x24
 8002fb6:	8819      	ldrh	r1, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8003034 <I2SEx_TxISR_I2SExt+0x90>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d101      	bne.n	8002fc6 <I2SEx_TxISR_I2SExt+0x22>
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <I2SEx_TxISR_I2SExt+0x94>)
 8002fc4:	e001      	b.n	8002fca <I2SEx_TxISR_I2SExt+0x26>
 8002fc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fca:	460a      	mov	r2, r1
 8002fcc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d121      	bne.n	800302a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a12      	ldr	r2, [pc, #72]	@ (8003034 <I2SEx_TxISR_I2SExt+0x90>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d101      	bne.n	8002ff4 <I2SEx_TxISR_I2SExt+0x50>
 8002ff0:	4b11      	ldr	r3, [pc, #68]	@ (8003038 <I2SEx_TxISR_I2SExt+0x94>)
 8002ff2:	e001      	b.n	8002ff8 <I2SEx_TxISR_I2SExt+0x54>
 8002ff4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	490d      	ldr	r1, [pc, #52]	@ (8003034 <I2SEx_TxISR_I2SExt+0x90>)
 8003000:	428b      	cmp	r3, r1
 8003002:	d101      	bne.n	8003008 <I2SEx_TxISR_I2SExt+0x64>
 8003004:	4b0c      	ldr	r3, [pc, #48]	@ (8003038 <I2SEx_TxISR_I2SExt+0x94>)
 8003006:	e001      	b.n	800300c <I2SEx_TxISR_I2SExt+0x68>
 8003008:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800300c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003010:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ff81 	bl	8002f2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40003800 	.word	0x40003800
 8003038:	40003400 	.word	0x40003400

0800303c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68d8      	ldr	r0, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304e:	1c99      	adds	r1, r3, #2
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003054:	b282      	uxth	r2, r0
 8003056:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d113      	bne.n	8003098 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800307e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff ff4a 	bl	8002f2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a20      	ldr	r2, [pc, #128]	@ (8003130 <I2SEx_RxISR_I2SExt+0x90>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <I2SEx_RxISR_I2SExt+0x16>
 80030b2:	4b20      	ldr	r3, [pc, #128]	@ (8003134 <I2SEx_RxISR_I2SExt+0x94>)
 80030b4:	e001      	b.n	80030ba <I2SEx_RxISR_I2SExt+0x1a>
 80030b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030ba:	68d8      	ldr	r0, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	1c99      	adds	r1, r3, #2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80030c6:	b282      	uxth	r2, r0
 80030c8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d121      	bne.n	8003126 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a12      	ldr	r2, [pc, #72]	@ (8003130 <I2SEx_RxISR_I2SExt+0x90>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d101      	bne.n	80030f0 <I2SEx_RxISR_I2SExt+0x50>
 80030ec:	4b11      	ldr	r3, [pc, #68]	@ (8003134 <I2SEx_RxISR_I2SExt+0x94>)
 80030ee:	e001      	b.n	80030f4 <I2SEx_RxISR_I2SExt+0x54>
 80030f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	490d      	ldr	r1, [pc, #52]	@ (8003130 <I2SEx_RxISR_I2SExt+0x90>)
 80030fc:	428b      	cmp	r3, r1
 80030fe:	d101      	bne.n	8003104 <I2SEx_RxISR_I2SExt+0x64>
 8003100:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <I2SEx_RxISR_I2SExt+0x94>)
 8003102:	e001      	b.n	8003108 <I2SEx_RxISR_I2SExt+0x68>
 8003104:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003108:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800310c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ff03 	bl	8002f2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40003800 	.word	0x40003800
 8003134:	40003400 	.word	0x40003400

08003138 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e267      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d075      	beq.n	8003242 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003156:	4b88      	ldr	r3, [pc, #544]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b04      	cmp	r3, #4
 8003160:	d00c      	beq.n	800317c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003162:	4b85      	ldr	r3, [pc, #532]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800316a:	2b08      	cmp	r3, #8
 800316c:	d112      	bne.n	8003194 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316e:	4b82      	ldr	r3, [pc, #520]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003176:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800317a:	d10b      	bne.n	8003194 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317c:	4b7e      	ldr	r3, [pc, #504]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d05b      	beq.n	8003240 <HAL_RCC_OscConfig+0x108>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d157      	bne.n	8003240 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e242      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800319c:	d106      	bne.n	80031ac <HAL_RCC_OscConfig+0x74>
 800319e:	4b76      	ldr	r3, [pc, #472]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a75      	ldr	r2, [pc, #468]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e01d      	b.n	80031e8 <HAL_RCC_OscConfig+0xb0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x98>
 80031b6:	4b70      	ldr	r3, [pc, #448]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6c      	ldr	r2, [pc, #432]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e00b      	b.n	80031e8 <HAL_RCC_OscConfig+0xb0>
 80031d0:	4b69      	ldr	r3, [pc, #420]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a68      	ldr	r2, [pc, #416]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b66      	ldr	r3, [pc, #408]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a65      	ldr	r2, [pc, #404]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80031e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d013      	beq.n	8003218 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7fd fef6 	bl	8000fe0 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f8:	f7fd fef2 	bl	8000fe0 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	@ 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e207      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	4b5b      	ldr	r3, [pc, #364]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0xc0>
 8003216:	e014      	b.n	8003242 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fd fee2 	bl	8000fe0 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003220:	f7fd fede 	bl	8000fe0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	@ 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e1f3      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003232:	4b51      	ldr	r3, [pc, #324]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0xe8>
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d063      	beq.n	8003316 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800324e:	4b4a      	ldr	r3, [pc, #296]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00b      	beq.n	8003272 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325a:	4b47      	ldr	r3, [pc, #284]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003262:	2b08      	cmp	r3, #8
 8003264:	d11c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b44      	ldr	r3, [pc, #272]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d116      	bne.n	80032a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003272:	4b41      	ldr	r3, [pc, #260]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_RCC_OscConfig+0x152>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e1c7      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328a:	4b3b      	ldr	r3, [pc, #236]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4937      	ldr	r1, [pc, #220]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 800329a:	4313      	orrs	r3, r2
 800329c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329e:	e03a      	b.n	8003316 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a8:	4b34      	ldr	r3, [pc, #208]	@ (800337c <HAL_RCC_OscConfig+0x244>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7fd fe97 	bl	8000fe0 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b6:	f7fd fe93 	bl	8000fe0 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e1a8      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d4:	4b28      	ldr	r3, [pc, #160]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4925      	ldr	r1, [pc, #148]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]
 80032e8:	e015      	b.n	8003316 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ea:	4b24      	ldr	r3, [pc, #144]	@ (800337c <HAL_RCC_OscConfig+0x244>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fd fe76 	bl	8000fe0 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f8:	f7fd fe72 	bl	8000fe0 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e187      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330a:	4b1b      	ldr	r3, [pc, #108]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d036      	beq.n	8003390 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d016      	beq.n	8003358 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332a:	4b15      	ldr	r3, [pc, #84]	@ (8003380 <HAL_RCC_OscConfig+0x248>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fd fe56 	bl	8000fe0 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003338:	f7fd fe52 	bl	8000fe0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e167      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334a:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <HAL_RCC_OscConfig+0x240>)
 800334c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x200>
 8003356:	e01b      	b.n	8003390 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003358:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <HAL_RCC_OscConfig+0x248>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335e:	f7fd fe3f 	bl	8000fe0 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003364:	e00e      	b.n	8003384 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003366:	f7fd fe3b 	bl	8000fe0 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d907      	bls.n	8003384 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e150      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
 8003378:	40023800 	.word	0x40023800
 800337c:	42470000 	.word	0x42470000
 8003380:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	4b88      	ldr	r3, [pc, #544]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1ea      	bne.n	8003366 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8097 	beq.w	80034cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a2:	4b81      	ldr	r3, [pc, #516]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10f      	bne.n	80033ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	4b7d      	ldr	r3, [pc, #500]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	4a7c      	ldr	r2, [pc, #496]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033be:	4b7a      	ldr	r3, [pc, #488]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ce:	4b77      	ldr	r3, [pc, #476]	@ (80035ac <HAL_RCC_OscConfig+0x474>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d118      	bne.n	800340c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033da:	4b74      	ldr	r3, [pc, #464]	@ (80035ac <HAL_RCC_OscConfig+0x474>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a73      	ldr	r2, [pc, #460]	@ (80035ac <HAL_RCC_OscConfig+0x474>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7fd fdfb 	bl	8000fe0 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7fd fdf7 	bl	8000fe0 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e10c      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b6a      	ldr	r3, [pc, #424]	@ (80035ac <HAL_RCC_OscConfig+0x474>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x2ea>
 8003414:	4b64      	ldr	r3, [pc, #400]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003418:	4a63      	ldr	r2, [pc, #396]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003420:	e01c      	b.n	800345c <HAL_RCC_OscConfig+0x324>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b05      	cmp	r3, #5
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x30c>
 800342a:	4b5f      	ldr	r3, [pc, #380]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342e:	4a5e      	ldr	r2, [pc, #376]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003430:	f043 0304 	orr.w	r3, r3, #4
 8003434:	6713      	str	r3, [r2, #112]	@ 0x70
 8003436:	4b5c      	ldr	r3, [pc, #368]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343a:	4a5b      	ldr	r2, [pc, #364]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	6713      	str	r3, [r2, #112]	@ 0x70
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0x324>
 8003444:	4b58      	ldr	r3, [pc, #352]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003448:	4a57      	ldr	r2, [pc, #348]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003450:	4b55      	ldr	r3, [pc, #340]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003454:	4a54      	ldr	r2, [pc, #336]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003456:	f023 0304 	bic.w	r3, r3, #4
 800345a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d015      	beq.n	8003490 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7fd fdbc 	bl	8000fe0 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346a:	e00a      	b.n	8003482 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fd fdb8 	bl	8000fe0 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e0cb      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003482:	4b49      	ldr	r3, [pc, #292]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0ee      	beq.n	800346c <HAL_RCC_OscConfig+0x334>
 800348e:	e014      	b.n	80034ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003490:	f7fd fda6 	bl	8000fe0 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003496:	e00a      	b.n	80034ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003498:	f7fd fda2 	bl	8000fe0 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0b5      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ae:	4b3e      	ldr	r3, [pc, #248]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1ee      	bne.n	8003498 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d105      	bne.n	80034cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c0:	4b39      	ldr	r3, [pc, #228]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	4a38      	ldr	r2, [pc, #224]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80a1 	beq.w	8003618 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d6:	4b34      	ldr	r3, [pc, #208]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d05c      	beq.n	800359c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d141      	bne.n	800356e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b31      	ldr	r3, [pc, #196]	@ (80035b0 <HAL_RCC_OscConfig+0x478>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fd fd76 	bl	8000fe0 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fd fd72 	bl	8000fe0 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e087      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	4b27      	ldr	r3, [pc, #156]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	019b      	lsls	r3, r3, #6
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	3b01      	subs	r3, #1
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	061b      	lsls	r3, r3, #24
 800353a:	491b      	ldr	r1, [pc, #108]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 800353c:	4313      	orrs	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003540:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <HAL_RCC_OscConfig+0x478>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7fd fd4b 	bl	8000fe0 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354e:	f7fd fd47 	bl	8000fe0 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e05c      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003560:	4b11      	ldr	r3, [pc, #68]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x416>
 800356c:	e054      	b.n	8003618 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	4b10      	ldr	r3, [pc, #64]	@ (80035b0 <HAL_RCC_OscConfig+0x478>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fd fd34 	bl	8000fe0 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357c:	f7fd fd30 	bl	8000fe0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e045      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x444>
 800359a:	e03d      	b.n	8003618 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e038      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40007000 	.word	0x40007000
 80035b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003624 <HAL_RCC_OscConfig+0x4ec>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d028      	beq.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d121      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d11a      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035e4:	4013      	ands	r3, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d111      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fa:	085b      	lsrs	r3, r3, #1
 80035fc:	3b01      	subs	r3, #1
 80035fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d107      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800

08003628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0cc      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800363c:	4b68      	ldr	r3, [pc, #416]	@ (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d90c      	bls.n	8003664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b65      	ldr	r3, [pc, #404]	@ (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b63      	ldr	r3, [pc, #396]	@ (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0b8      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800367c:	4b59      	ldr	r3, [pc, #356]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a58      	ldr	r2, [pc, #352]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003694:	4b53      	ldr	r3, [pc, #332]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a52      	ldr	r2, [pc, #328]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800369e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a0:	4b50      	ldr	r3, [pc, #320]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	494d      	ldr	r1, [pc, #308]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d044      	beq.n	8003748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	4b47      	ldr	r3, [pc, #284]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d119      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e07f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d003      	beq.n	80036e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e6:	4b3f      	ldr	r3, [pc, #252]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e06f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f6:	4b3b      	ldr	r3, [pc, #236]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e067      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003706:	4b37      	ldr	r3, [pc, #220]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f023 0203 	bic.w	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4934      	ldr	r1, [pc, #208]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003718:	f7fd fc62 	bl	8000fe0 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	e00a      	b.n	8003736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003720:	f7fd fc5e 	bl	8000fe0 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e04f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	4b2b      	ldr	r3, [pc, #172]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 020c 	and.w	r2, r3, #12
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	429a      	cmp	r2, r3
 8003746:	d1eb      	bne.n	8003720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003748:	4b25      	ldr	r3, [pc, #148]	@ (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d20c      	bcs.n	8003770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b22      	ldr	r3, [pc, #136]	@ (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b20      	ldr	r3, [pc, #128]	@ (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e032      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800377c:	4b19      	ldr	r3, [pc, #100]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4916      	ldr	r1, [pc, #88]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800379a:	4b12      	ldr	r3, [pc, #72]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	490e      	ldr	r1, [pc, #56]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ae:	f000 f821 	bl	80037f4 <HAL_RCC_GetSysClockFreq>
 80037b2:	4602      	mov	r2, r0
 80037b4:	4b0b      	ldr	r3, [pc, #44]	@ (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	490a      	ldr	r1, [pc, #40]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	5ccb      	ldrb	r3, [r1, r3]
 80037c2:	fa22 f303 	lsr.w	r3, r2, r3
 80037c6:	4a09      	ldr	r2, [pc, #36]	@ (80037ec <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ca:	4b09      	ldr	r3, [pc, #36]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fd fbc2 	bl	8000f58 <HAL_InitTick>

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023c00 	.word	0x40023c00
 80037e4:	40023800 	.word	0x40023800
 80037e8:	08003cb4 	.word	0x08003cb4
 80037ec:	20000000 	.word	0x20000000
 80037f0:	20000004 	.word	0x20000004

080037f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f8:	b090      	sub	sp, #64	@ 0x40
 80037fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003800:	2300      	movs	r3, #0
 8003802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003804:	2300      	movs	r3, #0
 8003806:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800380c:	4b59      	ldr	r3, [pc, #356]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x180>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	2b08      	cmp	r3, #8
 8003816:	d00d      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x40>
 8003818:	2b08      	cmp	r3, #8
 800381a:	f200 80a1 	bhi.w	8003960 <HAL_RCC_GetSysClockFreq+0x16c>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0x34>
 8003822:	2b04      	cmp	r3, #4
 8003824:	d003      	beq.n	800382e <HAL_RCC_GetSysClockFreq+0x3a>
 8003826:	e09b      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003828:	4b53      	ldr	r3, [pc, #332]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x184>)
 800382a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800382c:	e09b      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800382e:	4b53      	ldr	r3, [pc, #332]	@ (800397c <HAL_RCC_GetSysClockFreq+0x188>)
 8003830:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003832:	e098      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003834:	4b4f      	ldr	r3, [pc, #316]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x180>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800383c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800383e:	4b4d      	ldr	r3, [pc, #308]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x180>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d028      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384a:	4b4a      	ldr	r3, [pc, #296]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x180>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	099b      	lsrs	r3, r3, #6
 8003850:	2200      	movs	r2, #0
 8003852:	623b      	str	r3, [r7, #32]
 8003854:	627a      	str	r2, [r7, #36]	@ 0x24
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800385c:	2100      	movs	r1, #0
 800385e:	4b47      	ldr	r3, [pc, #284]	@ (800397c <HAL_RCC_GetSysClockFreq+0x188>)
 8003860:	fb03 f201 	mul.w	r2, r3, r1
 8003864:	2300      	movs	r3, #0
 8003866:	fb00 f303 	mul.w	r3, r0, r3
 800386a:	4413      	add	r3, r2
 800386c:	4a43      	ldr	r2, [pc, #268]	@ (800397c <HAL_RCC_GetSysClockFreq+0x188>)
 800386e:	fba0 1202 	umull	r1, r2, r0, r2
 8003872:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003874:	460a      	mov	r2, r1
 8003876:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800387a:	4413      	add	r3, r2
 800387c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800387e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003880:	2200      	movs	r2, #0
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	61fa      	str	r2, [r7, #28]
 8003886:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800388a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800388e:	f7fc fc9b 	bl	80001c8 <__aeabi_uldivmod>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4613      	mov	r3, r2
 8003898:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800389a:	e053      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389c:	4b35      	ldr	r3, [pc, #212]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x180>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	2200      	movs	r2, #0
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	617a      	str	r2, [r7, #20]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038ae:	f04f 0b00 	mov.w	fp, #0
 80038b2:	4652      	mov	r2, sl
 80038b4:	465b      	mov	r3, fp
 80038b6:	f04f 0000 	mov.w	r0, #0
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	0159      	lsls	r1, r3, #5
 80038c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c4:	0150      	lsls	r0, r2, #5
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	ebb2 080a 	subs.w	r8, r2, sl
 80038ce:	eb63 090b 	sbc.w	r9, r3, fp
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038e6:	ebb2 0408 	subs.w	r4, r2, r8
 80038ea:	eb63 0509 	sbc.w	r5, r3, r9
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	00eb      	lsls	r3, r5, #3
 80038f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038fc:	00e2      	lsls	r2, r4, #3
 80038fe:	4614      	mov	r4, r2
 8003900:	461d      	mov	r5, r3
 8003902:	eb14 030a 	adds.w	r3, r4, sl
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	eb45 030b 	adc.w	r3, r5, fp
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800391a:	4629      	mov	r1, r5
 800391c:	028b      	lsls	r3, r1, #10
 800391e:	4621      	mov	r1, r4
 8003920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003924:	4621      	mov	r1, r4
 8003926:	028a      	lsls	r2, r1, #10
 8003928:	4610      	mov	r0, r2
 800392a:	4619      	mov	r1, r3
 800392c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800392e:	2200      	movs	r2, #0
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	60fa      	str	r2, [r7, #12]
 8003934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003938:	f7fc fc46 	bl	80001c8 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4613      	mov	r3, r2
 8003942:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003944:	4b0b      	ldr	r3, [pc, #44]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x180>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	0c1b      	lsrs	r3, r3, #16
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	3301      	adds	r3, #1
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003954:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800395e:	e002      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003960:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x184>)
 8003962:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003968:	4618      	mov	r0, r3
 800396a:	3740      	adds	r7, #64	@ 0x40
 800396c:	46bd      	mov	sp, r7
 800396e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	00f42400 	.word	0x00f42400
 800397c:	017d7840 	.word	0x017d7840

08003980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003984:	4b03      	ldr	r3, [pc, #12]	@ (8003994 <HAL_RCC_GetHCLKFreq+0x14>)
 8003986:	681b      	ldr	r3, [r3, #0]
}
 8003988:	4618      	mov	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	20000000 	.word	0x20000000

08003998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800399c:	f7ff fff0 	bl	8003980 <HAL_RCC_GetHCLKFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b05      	ldr	r3, [pc, #20]	@ (80039b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	0a9b      	lsrs	r3, r3, #10
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4903      	ldr	r1, [pc, #12]	@ (80039bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40023800 	.word	0x40023800
 80039bc:	08003cc4 	.word	0x08003cc4

080039c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d105      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d035      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039e8:	4b62      	ldr	r3, [pc, #392]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039ee:	f7fd faf7 	bl	8000fe0 <HAL_GetTick>
 80039f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039f4:	e008      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039f6:	f7fd faf3 	bl	8000fe0 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e0b0      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a08:	4b5b      	ldr	r3, [pc, #364]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f0      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	019a      	lsls	r2, r3, #6
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	071b      	lsls	r3, r3, #28
 8003a20:	4955      	ldr	r1, [pc, #340]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a28:	4b52      	ldr	r3, [pc, #328]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a2e:	f7fd fad7 	bl	8000fe0 <HAL_GetTick>
 8003a32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a36:	f7fd fad3 	bl	8000fe0 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e090      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a48:	4b4b      	ldr	r3, [pc, #300]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8083 	beq.w	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	4b44      	ldr	r3, [pc, #272]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	4a43      	ldr	r2, [pc, #268]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a72:	4b41      	ldr	r3, [pc, #260]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a7e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a3e      	ldr	r2, [pc, #248]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a8a:	f7fd faa9 	bl	8000fe0 <HAL_GetTick>
 8003a8e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a92:	f7fd faa5 	bl	8000fe0 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e062      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003aa4:	4b35      	ldr	r3, [pc, #212]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ab0:	4b31      	ldr	r3, [pc, #196]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d02f      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d028      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ace:	4b2a      	ldr	r3, [pc, #168]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ad8:	4b29      	ldr	r3, [pc, #164]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ade:	4b28      	ldr	r3, [pc, #160]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ae4:	4a24      	ldr	r2, [pc, #144]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003aea:	4b23      	ldr	r3, [pc, #140]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d114      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003af6:	f7fd fa73 	bl	8000fe0 <HAL_GetTick>
 8003afa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fd fa6f 	bl	8000fe0 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e02a      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b14:	4b18      	ldr	r3, [pc, #96]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ee      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b2c:	d10d      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003b2e:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b42:	490d      	ldr	r1, [pc, #52]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	608b      	str	r3, [r1, #8]
 8003b48:	e005      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b50:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003b54:	6093      	str	r3, [r2, #8]
 8003b56:	4b08      	ldr	r3, [pc, #32]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b58:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b62:	4905      	ldr	r1, [pc, #20]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	42470068 	.word	0x42470068
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	42470e40 	.word	0x42470e40

08003b84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d13f      	bne.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003ba2:	4b24      	ldr	r3, [pc, #144]	@ (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d006      	beq.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bb8:	d12f      	bne.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003bba:	4b1f      	ldr	r3, [pc, #124]	@ (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003bbc:	617b      	str	r3, [r7, #20]
          break;
 8003bbe:	e02f      	b.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bcc:	d108      	bne.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003bce:	4b19      	ldr	r3, [pc, #100]	@ (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bd6:	4a19      	ldr	r2, [pc, #100]	@ (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	e007      	b.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003be0:	4b14      	ldr	r3, [pc, #80]	@ (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003be8:	4a15      	ldr	r2, [pc, #84]	@ (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003bf0:	4b10      	ldr	r3, [pc, #64]	@ (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bf6:	099b      	lsrs	r3, r3, #6
 8003bf8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	fb02 f303 	mul.w	r3, r2, r3
 8003c02:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003c04:	4b0b      	ldr	r3, [pc, #44]	@ (8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c0a:	0f1b      	lsrs	r3, r3, #28
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c16:	617b      	str	r3, [r7, #20]
          break;
 8003c18:	e002      	b.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
          break;
 8003c1e:	bf00      	nop
        }
      }
      break;
 8003c20:	e000      	b.n	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8003c22:	bf00      	nop
    }
  }
  return frequency;
 8003c24:	697b      	ldr	r3, [r7, #20]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	00bb8000 	.word	0x00bb8000
 8003c3c:	017d7840 	.word	0x017d7840
 8003c40:	00f42400 	.word	0x00f42400

08003c44 <memset>:
 8003c44:	4402      	add	r2, r0
 8003c46:	4603      	mov	r3, r0
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d100      	bne.n	8003c4e <memset+0xa>
 8003c4c:	4770      	bx	lr
 8003c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c52:	e7f9      	b.n	8003c48 <memset+0x4>

08003c54 <__libc_init_array>:
 8003c54:	b570      	push	{r4, r5, r6, lr}
 8003c56:	4d0d      	ldr	r5, [pc, #52]	@ (8003c8c <__libc_init_array+0x38>)
 8003c58:	4c0d      	ldr	r4, [pc, #52]	@ (8003c90 <__libc_init_array+0x3c>)
 8003c5a:	1b64      	subs	r4, r4, r5
 8003c5c:	10a4      	asrs	r4, r4, #2
 8003c5e:	2600      	movs	r6, #0
 8003c60:	42a6      	cmp	r6, r4
 8003c62:	d109      	bne.n	8003c78 <__libc_init_array+0x24>
 8003c64:	4d0b      	ldr	r5, [pc, #44]	@ (8003c94 <__libc_init_array+0x40>)
 8003c66:	4c0c      	ldr	r4, [pc, #48]	@ (8003c98 <__libc_init_array+0x44>)
 8003c68:	f000 f818 	bl	8003c9c <_init>
 8003c6c:	1b64      	subs	r4, r4, r5
 8003c6e:	10a4      	asrs	r4, r4, #2
 8003c70:	2600      	movs	r6, #0
 8003c72:	42a6      	cmp	r6, r4
 8003c74:	d105      	bne.n	8003c82 <__libc_init_array+0x2e>
 8003c76:	bd70      	pop	{r4, r5, r6, pc}
 8003c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7c:	4798      	blx	r3
 8003c7e:	3601      	adds	r6, #1
 8003c80:	e7ee      	b.n	8003c60 <__libc_init_array+0xc>
 8003c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c86:	4798      	blx	r3
 8003c88:	3601      	adds	r6, #1
 8003c8a:	e7f2      	b.n	8003c72 <__libc_init_array+0x1e>
 8003c8c:	08003cdc 	.word	0x08003cdc
 8003c90:	08003cdc 	.word	0x08003cdc
 8003c94:	08003cdc 	.word	0x08003cdc
 8003c98:	08003ce0 	.word	0x08003ce0

08003c9c <_init>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	bf00      	nop
 8003ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca2:	bc08      	pop	{r3}
 8003ca4:	469e      	mov	lr, r3
 8003ca6:	4770      	bx	lr

08003ca8 <_fini>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	bf00      	nop
 8003cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cae:	bc08      	pop	{r3}
 8003cb0:	469e      	mov	lr, r3
 8003cb2:	4770      	bx	lr
